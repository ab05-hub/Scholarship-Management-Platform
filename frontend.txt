******************models*********************

1)feedback.model.ts
import { User } from "./user.model";
 
export interface Feedback
{
    FeedbackId? : number;
    UserId : number;
    User?: User;
    FeedbackText : string;
    Date : Date;
}

2)login.model.ts
export interface Login{
    [key: string]: any;

    Email: string 
    Password: string
}

3)scholarship.model.ts
export interface Scholarship{
    ScholarshipId?:number
    Name:string
    Description:string
    EligibilityCriteria:string
    Amount:number
    Deadline:string
    Category:string
    NumberOfAwards:number
    Sponsor:string
}

4) scholarshipapplication.model.ts
import { Scholarship } from "./scholarship.model"
import { User } from "./user.model"



export interface ScholarshipApplication{
     ScholarshipApplicationId?:number
     UserId:number
     User?:User
     ScholarshipId:number
     ApplicationDate:string
     ApplicationStatus:string
     Essay:string
     Remarks:string
     SupportingDocuments:string
     Scholarship?: Scholarship
}

5)user.model.ts
export interface User{
    [key: string]: any;
    UserId?:number
    Email:string
    Password:string
    Username:string
    MobileNumber:string
    UserRole:string
}


**********************************Services*******************

1)auth.service.ts
import { Injectable } from '@angular/core';
import { User } from '../models/user.model';
import { Observable } from 'rxjs';
import { HttpClient } from '@angular/common/http';
import { Login } from '../models/login.model';
import { tap } from 'rxjs/operators';
import { ROLE_KEY , TOKEN_KEY , USERID_KEY } from '../constants';
@Injectable({
  providedIn: 'root'
})
export class AuthService {

  constructor(private httpClient: HttpClient) { }
 
  public apiUrl: string = 'http://localhost:5283';
 
  register(user: User): Observable<any> {
    return this.httpClient.post<any>(this.apiUrl + "/api/register", user);
  }
 
  login(login: Login): Observable<any> {
    return this.httpClient.post<any>(this.apiUrl + "/api/login", login)
      .pipe(
        tap(
          response => {
            if (response && response.token) {
              const tokenPart = response.token.split('.');
              let payload = JSON.parse(atob(tokenPart[1]));
 
              localStorage.setItem(ROLE_KEY, payload.role);
              localStorage.setItem(TOKEN_KEY, JSON.stringify(response.token));
              localStorage.setItem(USERID_KEY, payload.nameid);
            }
          }
        )
      );
  }
 
  isLoggedIn(): boolean {
    return localStorage.getItem(ROLE_KEY) != null;
  }
 
  isAdmin(): boolean {
    return localStorage.getItem(ROLE_KEY) === 'Admin';
  }
 
  isUser(): boolean {
    return localStorage.getItem(ROLE_KEY) === 'User';
  }
 
  logout() {
    localStorage.clear();
  }
 
 getToken(): string {
    const token = localStorage.getItem(TOKEN_KEY);
    return token ? JSON.parse(token) : '';
}

 getUserId(): number {
    const userId = localStorage.getItem(USERID_KEY);
    return userId ? parseInt(userId, 10) : 0;
}

}

2)feedback.service.ts
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Feedback } from '../models/feedback.model';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class FeedbackService {

  constructor(private client: HttpClient) { }
  apiUrl: string = 'http://localhost:5283';
 
  sendFeedback(feedback: Feedback): Observable<Feedback> {
    return this.client.post<Feedback>(`${this.apiUrl}/api/feedback`, feedback);
  }
  getAllFeedbacksByUserId(userId: number): Observable<Feedback[]> {
    return this.client.get<Feedback[]>(`${this.apiUrl}/api/feedback/user/${userId}`);
  }
 
  deleteFeedback(feedbackId: number): Observable<void> {
    return this.client.delete<void>(`${this.apiUrl}/api/feedback/${feedbackId}`);
  }
  getFeedbacks(): Observable<Feedback[]> {
        return this.client.get<Feedback[]>(`${this.apiUrl}/api/feedback`);
      }
}

3) scholarship.service.ts
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { Scholarship } from '../models/scholarship.model';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import {ScholarshipApplication} from '../models/scholarshipapplication.model'
@Injectable({
  providedIn: 'root'
})
export class ScholarshipService {

  public apiUrl='http://localhost:5283';
 
  constructor(private http: HttpClient) { }
 
  getAllScholarships(): Observable<Scholarship[]>
  {
    return this.http.get<Scholarship[]>(`${this.apiUrl}/api/scholarship`);
  }
  getScholarshipById(id:number): Observable<Scholarship>
  {
    return this.http.get<Scholarship>(`${this.apiUrl}/api/scholarship/${id}`);
  }
  addScholarship(requestObject:Scholarship): Observable<Scholarship>
  {
    return this.http.post<Scholarship>(`${this.apiUrl}/api/scholarship`,requestObject);
  }
  updateScholarship(id:number, requestObject: Scholarship): Observable<Scholarship>
  {
    return this.http.put<Scholarship>(`${this.apiUrl}/api/scholarship/${id}`,requestObject);
  }
  deleteScholarship(scholarshipId:number): Observable<void>
  {
    return this.http.delete<void>(`${this.apiUrl}/api/scholarship/${scholarshipId}`);
  }
  getAppliedScholarship(userId: number): Observable<ScholarshipApplication[]>
  {
    return this.http.get<ScholarshipApplication[]>(`${this.apiUrl}/api/ScholarshipApplication/user/${userId}`);
  }
 
  deleteScholarshipApplication(scholarshipId: number): Observable<void>
  {
    return this.http.delete<void>(`${this.apiUrl}/api/ScholarshipApplication/${scholarshipId}`);
  }
 
  addScholarshipApplication(data: ScholarshipApplication): Observable<ScholarshipApplication>
  {
    return this.http.post<ScholarshipApplication>(`${this.apiUrl}/api/ScholarshipApplication`, data);
  }
 
  getAllScholarshipApplications(): Observable<ScholarshipApplication[]>
  {
    return this.http.get<ScholarshipApplication[]>(`${this.apiUrl}/api/ScholarshipApplication`);
  }
 
  updateApplicationStatus(id: number, ScholarshipApplication: ScholarshipApplication): Observable<ScholarshipApplication>
  {
    return this.http.put<ScholarshipApplication>(`${this.apiUrl}/api/ScholarshipApplication/${id}`, ScholarshipApplication);
  }
  getApplicationCountForScholarship(scholarshipId: number): Observable<number> {
    return this.http.get<number>(`${this.apiUrl}/api/ScholarshipApplication/count/${scholarshipId}`);
  }
}


******************************Interceptors**************
1)auth.interceptor.ts

import { Injectable } from '@angular/core';
import {
  HttpRequest,
  HttpHandler,
  HttpEvent,
  HttpInterceptor
} from '@angular/common/http';
import { Observable } from 'rxjs';
import { AuthService } from '../services/auth.service';

@Injectable()
export class AuthInterceptor implements HttpInterceptor {

  constructor(private authService: AuthService) {}

  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {
    const token = this.authService.getToken();
    if (token) {
      const cloned = request.clone({
        setHeaders: {
          Authorization: `Bearer ${token}`
        }
      });
      return next.handle(cloned);
    }
    return next.handle(request);
  }
}


**************************app.routing.module.ts****************
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { NavbarComponent } from './components/navbar/navbar.component';
import { LoginComponent } from './components/login/login.component';
import { RegistrationComponent } from './components/registration/registration.component';
import { UsernavComponent } from './components/usernav/usernav.component';
import { ViewscholarshipComponent } from './components/viewscholarship/viewscholarship.component';
import { AdmineditscholarshipComponent } from './components/admineditscholarship/admineditscholarship.component';
import { CreatescholarshipComponent } from './components/createscholarship/createscholarship.component';
import { RequestedscholarshipComponent } from './components/requestedscholarship/requestedscholarship.component';
import { AdminviewfeedbackComponent } from './components/adminviewfeedback/adminviewfeedback.component';
import { UserviewscholarshipComponent } from './components/userviewscholarship/userviewscholarship.component';
import { UserviewfeedbackComponent } from './components/userviewfeedback/userviewfeedback.component';
import { UserappliedscholarshipComponent } from './components/userappliedscholarship/userappliedscholarship.component';
import { UseraddfeedbackComponent } from './components/useraddfeedback/useraddfeedback.component';
import { ScholarshipformComponent } from './components/scholarshipform/scholarshipform.component';
import { ErrorComponent } from './components/error/error.component';
import { AuthGuard } from './components/authguard/auth.guard';
import { AdminGuard } from './components/adminguard/admin.guard';
import { UserGuard } from './components/userguard/user.guard';
import { AdminnavComponent } from './components/adminnav/adminnav.component';

const routes: Routes = [
  {path: 'navbar' , component:NavbarComponent},
  {path: 'adminnav' , component:AdminnavComponent, canActivate: [AuthGuard, AdminGuard]},
  {path: 'login' , component:LoginComponent},
  {path: 'registration' , component:RegistrationComponent},
  {path: 'usernav' , component:UsernavComponent,canActivate: [AuthGuard, UserGuard]},
  {path: 'viewscholarship' , component:ViewscholarshipComponent},
  {path: 'createscholarship', component:CreatescholarshipComponent,canActivate: [AuthGuard, AdminGuard]},
  {path: 'requestedscholarship' , component:RequestedscholarshipComponent,canActivate: [AuthGuard, AdminGuard]},
  {path: 'adminviewfeedback' , component:AdminviewfeedbackComponent,canActivate: [AuthGuard, AdminGuard]},
  {path: 'userviewscholarship' , component:UserviewscholarshipComponent,canActivate: [AuthGuard, UserGuard]},
  {path: 'userviewfeedback' , component:UserviewfeedbackComponent,canActivate: [AuthGuard, UserGuard]},
  {path:'userappliedscholarship' , component:UserappliedscholarshipComponent,canActivate: [AuthGuard, UserGuard]},
  {path: 'useraddfeedback' , component:UseraddfeedbackComponent,canActivate: [AuthGuard, UserGuard]},
  { path: 'admineditscholarship/:id', component: AdmineditscholarshipComponent,canActivate: [AuthGuard, AdminGuard]},
  { path: 'scholarshipform/:id', component:ScholarshipformComponent,canActivate: [AuthGuard, UserGuard]},
  { path: 'error', component: ErrorComponent },
  { path: '**', redirectTo: 'navbar', pathMatch: 'full' }
]
@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }



*****************************app.component.html******************
<app-home></app-home>
<router-outlet></router-outlet>


************************app.module.ts***************
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { NavbarComponent } from './components/navbar/navbar.component';
import { FormsModule, ReactiveFormsModule } from '@angular/forms'
import { CommonModule } from '@angular/common';
import { HomeComponent } from './components/home/home.component';
import { LoginComponent } from './components/login/login.component';
import { RegistrationComponent } from './components/registration/registration.component';
import { HTTP_INTERCEPTORS,HttpClientModule } from '@angular/common/http';
import { AuthInterceptor } from './interceptors/auth.interceptor';
import { AdminnavComponent } from './components/adminnav/adminnav.component';
import { UsernavComponent } from './components/usernav/usernav.component';
import { ViewscholarshipComponent } from './components/viewscholarship/viewscholarship.component';
import { AdmineditscholarshipComponent } from './components/admineditscholarship/admineditscholarship.component';
import { CreatescholarshipComponent } from './components/createscholarship/createscholarship.component';
import { RequestedscholarshipComponent } from './components/requestedscholarship/requestedscholarship.component';
import { AdminviewfeedbackComponent } from './components/adminviewfeedback/adminviewfeedback.component';
import { UserviewscholarshipComponent } from './components/userviewscholarship/userviewscholarship.component';
import { UserviewfeedbackComponent } from './components/userviewfeedback/userviewfeedback.component';
import { UserappliedscholarshipComponent } from './components/userappliedscholarship/userappliedscholarship.component';
import { UseraddfeedbackComponent } from './components/useraddfeedback/useraddfeedback.component';
import { ScholarshipformComponent } from './components/scholarshipform/scholarshipform.component';
import { NgxPaginationModule } from 'ngx-pagination';
import { ErrorComponent } from './components/error/error.component';
import { LoaderComponent } from './components/loader/loader.component';
import { QueryBuilderComponent } from './components/query-builder/query-builder.component';
import { OverviewComponent } from './components/overview/overview.component';

@NgModule({
  declarations: [
    AppComponent,
    NavbarComponent,
    HomeComponent,
    LoginComponent,
    RegistrationComponent,
    AdminnavComponent,
    UsernavComponent,
    ViewscholarshipComponent,
    AdmineditscholarshipComponent,
    CreatescholarshipComponent,
    RequestedscholarshipComponent,
    AdminviewfeedbackComponent,
    UserviewscholarshipComponent,
    UserviewfeedbackComponent,
    UserappliedscholarshipComponent,
    UseraddfeedbackComponent,
    ScholarshipformComponent,
    ErrorComponent,
    LoaderComponent,
    QueryBuilderComponent,
    OverviewComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    FormsModule,
    CommonModule,
    HttpClientModule,
    ReactiveFormsModule,
    NgxPaginationModule
  ],
  providers: [{ provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true }],
  bootstrap: [AppComponent]
})
export class AppModule { }



*****************constant.ts**********************
export const ROLE_KEY = 'role';

export const TOKEN_KEY = 'token';

export const USERID_KEY = 'userid';